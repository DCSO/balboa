// Code generated by protoc-gen-go. DO NOT EDIT.
// source: dnsdedupe.proto

package format

import (
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	math "math"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

type DnsDedupeType int32

const (
	DnsDedupeType_INSERTION            DnsDedupeType = 0
	DnsDedupeType_EXPIRATION           DnsDedupeType = 1
	DnsDedupeType_CHAFF                DnsDedupeType = 2
	DnsDedupeType_AUTHORITATIVE        DnsDedupeType = 3
	DnsDedupeType_MERGED               DnsDedupeType = 4
	DnsDedupeType_MERGED_AUTHORITATIVE DnsDedupeType = 5
	DnsDedupeType_MERGED_INSERTION     DnsDedupeType = 6
)

var DnsDedupeType_name = map[int32]string{
	0: "INSERTION",
	1: "EXPIRATION",
	2: "CHAFF",
	3: "AUTHORITATIVE",
	4: "MERGED",
	5: "MERGED_AUTHORITATIVE",
	6: "MERGED_INSERTION",
}

var DnsDedupeType_value = map[string]int32{
	"INSERTION":            0,
	"EXPIRATION":           1,
	"CHAFF":                2,
	"AUTHORITATIVE":        3,
	"MERGED":               4,
	"MERGED_AUTHORITATIVE": 5,
	"MERGED_INSERTION":     6,
}

func (x DnsDedupeType) Enum() *DnsDedupeType {
	p := new(DnsDedupeType)
	*p = x
	return p
}

func (x DnsDedupeType) String() string {
	return proto.EnumName(DnsDedupeType_name, int32(x))
}

func (x *DnsDedupeType) UnmarshalJSON(data []byte) error {
	value, err := proto.UnmarshalJSONEnum(DnsDedupeType_value, data, "DnsDedupeType")
	if err != nil {
		return err
	}
	*x = DnsDedupeType(value)
	return nil
}

func (DnsDedupeType) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_8052a6d13cd2fbdc, []int{0}
}

type DnsDedupe struct {
	Type                 *DnsDedupeType `protobuf:"varint,13,opt,name=type,enum=format.DnsDedupeType" json:"type,omitempty"`
	Count                *uint32        `protobuf:"varint,10,opt,name=count" json:"count,omitempty"`
	TimeFirst            *uint32        `protobuf:"varint,11,opt,name=time_first,json=timeFirst" json:"time_first,omitempty"`
	TimeLast             *uint32        `protobuf:"varint,12,opt,name=time_last,json=timeLast" json:"time_last,omitempty"`
	ZoneTimeFirst        *uint32        `protobuf:"varint,17,opt,name=zone_time_first,json=zoneTimeFirst" json:"zone_time_first,omitempty"`
	ZoneTimeLast         *uint32        `protobuf:"varint,18,opt,name=zone_time_last,json=zoneTimeLast" json:"zone_time_last,omitempty"`
	ResponseIp           []byte         `protobuf:"bytes,14,opt,name=response_ip,json=responseIp" json:"response_ip,omitempty"`
	Rrname               []byte         `protobuf:"bytes,1,opt,name=rrname" json:"rrname,omitempty"`
	Rrtype               *uint32        `protobuf:"varint,2,opt,name=rrtype" json:"rrtype,omitempty"`
	Rrclass              *uint32        `protobuf:"varint,3,opt,name=rrclass" json:"rrclass,omitempty"`
	Rrttl                *uint32        `protobuf:"varint,4,opt,name=rrttl" json:"rrttl,omitempty"`
	Rdata                [][]byte       `protobuf:"bytes,5,rep,name=rdata" json:"rdata,omitempty"`
	Response             []byte         `protobuf:"bytes,15,opt,name=response" json:"response,omitempty"`
	Bailiwick            []byte         `protobuf:"bytes,16,opt,name=bailiwick" json:"bailiwick,omitempty"`
	XXX_NoUnkeyedLiteral struct{}       `json:"-"`
	XXX_unrecognized     []byte         `json:"-"`
	XXX_sizecache        int32          `json:"-"`
}

func (m *DnsDedupe) Reset()         { *m = DnsDedupe{} }
func (m *DnsDedupe) String() string { return proto.CompactTextString(m) }
func (*DnsDedupe) ProtoMessage()    {}
func (*DnsDedupe) Descriptor() ([]byte, []int) {
	return fileDescriptor_8052a6d13cd2fbdc, []int{0}
}

func (m *DnsDedupe) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_DnsDedupe.Unmarshal(m, b)
}
func (m *DnsDedupe) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_DnsDedupe.Marshal(b, m, deterministic)
}
func (m *DnsDedupe) XXX_Merge(src proto.Message) {
	xxx_messageInfo_DnsDedupe.Merge(m, src)
}
func (m *DnsDedupe) XXX_Size() int {
	return xxx_messageInfo_DnsDedupe.Size(m)
}
func (m *DnsDedupe) XXX_DiscardUnknown() {
	xxx_messageInfo_DnsDedupe.DiscardUnknown(m)
}

var xxx_messageInfo_DnsDedupe proto.InternalMessageInfo

func (m *DnsDedupe) GetType() DnsDedupeType {
	if m != nil && m.Type != nil {
		return *m.Type
	}
	return DnsDedupeType_INSERTION
}

func (m *DnsDedupe) GetCount() uint32 {
	if m != nil && m.Count != nil {
		return *m.Count
	}
	return 0
}

func (m *DnsDedupe) GetTimeFirst() uint32 {
	if m != nil && m.TimeFirst != nil {
		return *m.TimeFirst
	}
	return 0
}

func (m *DnsDedupe) GetTimeLast() uint32 {
	if m != nil && m.TimeLast != nil {
		return *m.TimeLast
	}
	return 0
}

func (m *DnsDedupe) GetZoneTimeFirst() uint32 {
	if m != nil && m.ZoneTimeFirst != nil {
		return *m.ZoneTimeFirst
	}
	return 0
}

func (m *DnsDedupe) GetZoneTimeLast() uint32 {
	if m != nil && m.ZoneTimeLast != nil {
		return *m.ZoneTimeLast
	}
	return 0
}

func (m *DnsDedupe) GetResponseIp() []byte {
	if m != nil {
		return m.ResponseIp
	}
	return nil
}

func (m *DnsDedupe) GetRrname() []byte {
	if m != nil {
		return m.Rrname
	}
	return nil
}

func (m *DnsDedupe) GetRrtype() uint32 {
	if m != nil && m.Rrtype != nil {
		return *m.Rrtype
	}
	return 0
}

func (m *DnsDedupe) GetRrclass() uint32 {
	if m != nil && m.Rrclass != nil {
		return *m.Rrclass
	}
	return 0
}

func (m *DnsDedupe) GetRrttl() uint32 {
	if m != nil && m.Rrttl != nil {
		return *m.Rrttl
	}
	return 0
}

func (m *DnsDedupe) GetRdata() [][]byte {
	if m != nil {
		return m.Rdata
	}
	return nil
}

func (m *DnsDedupe) GetResponse() []byte {
	if m != nil {
		return m.Response
	}
	return nil
}

func (m *DnsDedupe) GetBailiwick() []byte {
	if m != nil {
		return m.Bailiwick
	}
	return nil
}

func init() {
	proto.RegisterEnum("format.DnsDedupeType", DnsDedupeType_name, DnsDedupeType_value)
	proto.RegisterType((*DnsDedupe)(nil), "format.DnsDedupe")
}

func init() { proto.RegisterFile("dnsdedupe.proto", fileDescriptor_8052a6d13cd2fbdc) }

var fileDescriptor_8052a6d13cd2fbdc = []byte{
	// 376 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x54, 0x91, 0xdf, 0x8e, 0x93, 0x40,
	0x14, 0xc6, 0x65, 0x29, 0xb8, 0x9c, 0x05, 0xca, 0x9e, 0x54, 0x33, 0xf1, 0x4f, 0x24, 0xc6, 0x18,
	0xf4, 0xa2, 0x17, 0xbe, 0x01, 0xb1, 0xd4, 0x25, 0xd1, 0x5d, 0x33, 0xa2, 0xf1, 0x8e, 0x8c, 0x65,
	0x36, 0x21, 0x52, 0x20, 0x33, 0xd3, 0x98, 0xfa, 0x04, 0xbe, 0x89, 0xaf, 0x69, 0x38, 0x94, 0xd6,
	0xde, 0xf5, 0xf7, 0x7d, 0xbf, 0x7c, 0xd3, 0x1c, 0x60, 0x5e, 0xb5, 0xba, 0x92, 0xd5, 0xae, 0x97,
	0xcb, 0x5e, 0x75, 0xa6, 0x43, 0xf7, 0xbe, 0x53, 0x5b, 0x61, 0x5e, 0xfe, 0xb5, 0xc1, 0x5b, 0xb5,
	0x7a, 0x45, 0x1d, 0xbe, 0x81, 0x99, 0xd9, 0xf7, 0x92, 0x05, 0xb1, 0x95, 0x84, 0xef, 0x1e, 0x2d,
	0x47, 0x69, 0x79, 0x14, 0x8a, 0x7d, 0x2f, 0x39, 0x29, 0xb8, 0x00, 0x67, 0xd3, 0xed, 0x5a, 0xc3,
	0x20, 0xb6, 0x92, 0x80, 0x8f, 0x80, 0xcf, 0x01, 0x4c, 0xbd, 0x95, 0xe5, 0x7d, 0xad, 0xb4, 0x61,
	0x57, 0x54, 0x79, 0x43, 0xb2, 0x1e, 0x02, 0x7c, 0x0a, 0x04, 0x65, 0x23, 0xb4, 0x61, 0x3e, 0xb5,
	0x97, 0x43, 0xf0, 0x51, 0x68, 0x83, 0xaf, 0x61, 0xfe, 0xbb, 0x6b, 0x65, 0xf9, 0xdf, 0xc0, 0x35,
	0x29, 0xc1, 0x10, 0x17, 0xc7, 0x91, 0x57, 0x10, 0x9e, 0x3c, 0x5a, 0x42, 0xd2, 0xfc, 0x49, 0xa3,
	0xb5, 0x17, 0x70, 0xa5, 0xa4, 0xee, 0xbb, 0x56, 0xcb, 0xb2, 0xee, 0x59, 0x18, 0x5b, 0x89, 0xcf,
	0x61, 0x8a, 0xf2, 0x1e, 0x1f, 0x83, 0xab, 0x54, 0x2b, 0xb6, 0x92, 0x59, 0xd4, 0x1d, 0x68, 0xcc,
	0xe9, 0x0a, 0x17, 0x34, 0x7b, 0x20, 0x64, 0xf0, 0x50, 0xa9, 0x4d, 0x23, 0xb4, 0x66, 0x36, 0x15,
	0x13, 0x0e, 0xa7, 0x50, 0xca, 0x98, 0x86, 0xcd, 0xc6, 0x53, 0x10, 0x50, 0x5a, 0x09, 0x23, 0x98,
	0x13, 0xdb, 0x89, 0xcf, 0x47, 0xc0, 0x27, 0x70, 0x39, 0xfd, 0x07, 0x36, 0xa7, 0x77, 0x8f, 0x8c,
	0xcf, 0xc0, 0xfb, 0x21, 0xea, 0xa6, 0xfe, 0x55, 0x6f, 0x7e, 0xb2, 0x88, 0xca, 0x53, 0xf0, 0xf6,
	0x8f, 0x05, 0xc1, 0xd9, 0x87, 0xc0, 0x00, 0xbc, 0xfc, 0xf6, 0x4b, 0xc6, 0x8b, 0xfc, 0xee, 0x36,
	0x7a, 0x80, 0x21, 0x40, 0xf6, 0xfd, 0x73, 0xce, 0x53, 0x62, 0x0b, 0x3d, 0x70, 0xde, 0xdf, 0xa4,
	0xeb, 0x75, 0x74, 0x81, 0xd7, 0x10, 0xa4, 0x5f, 0x8b, 0x9b, 0x3b, 0x9e, 0x17, 0x69, 0x91, 0x7f,
	0xcb, 0x22, 0x1b, 0x01, 0xdc, 0x4f, 0x19, 0xff, 0x90, 0xad, 0xa2, 0x19, 0x32, 0x58, 0x8c, 0xbf,
	0xcb, 0x73, 0xcb, 0xc1, 0x05, 0x44, 0x87, 0xe6, 0xf4, 0x92, 0xfb, 0x2f, 0x00, 0x00, 0xff, 0xff,
	0x58, 0x69, 0x61, 0x97, 0x4e, 0x02, 0x00, 0x00,
}
